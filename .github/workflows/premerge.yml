on: [push]

name: Premerge

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.39.0"
          default: true
          components: rustfmt, clippy

      - name: Install spatial
        uses: jamiebrynes7/get-spatial-cli-action@v1.1
        with:
          version: 20190416.094616.a865bb5b54
          oauth_token: ${{ secrets.SPATIAL_OAUTH_TOKEN }}

      - name: Install cargo-spatial
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path ./cargo-spatial --force --debug

      - name: Install SpatialOS C API dependencies
        uses: actions-rs/cargo@v1
        with:
          command: spatial
          args: --verbose download sdk --sdk-version 14.1.0 --with-test-schema
        env:
          SPATIAL_LIB_DIR: "dependencies"

      - name: Generate project-example code
        run: pushd project-example && cargo spatial --verbose codegen && popd
        shell: bash
        env:
          SPATIAL_LIB_DIR: "../dependencies"

      - name: Generate test-suite code
        run: pushd test-suite && cargo spatial --verbose codegen && popd
        shell: bash
        env:
          SPATIAL_LIB_DIR: "../dependencies"
        
      - name: Lint
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
        env:
          SPATIAL_LIB_DIR: "dependencies"

      - name: Clippy
        if: matrix.os == 'macOS-latest' # Only need to run this once and MacOS machines appear to be the fastest.
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings -A dead-code
        env:
          SPATIAL_LIB_DIR: "dependencies"

      - name: Build crates
        uses: actions-rs/cargo@v1
        with:
          command: build
        env:
          SPATIAL_LIB_DIR: "dependencies"

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          SPATIAL_LIB_DIR: "dependencies"      

      - name: Build examples
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples
        env:
          SPATIAL_LIB_DIR: "dependencies"
  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@master
    
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install spatial
        uses: jamiebrynes7/get-spatial-cli-action@v1.1
        with:
          version: 20190416.094616.a865bb5b54
          oauth_token: ${{ secrets.SPATIAL_OAUTH_TOKEN }}

      - name: Install cargo-spatial
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path ./cargo-spatial --force --debug

      - name: Install SpatialOS C API dependencies
        uses: actions-rs/cargo@v1
        with:
          command: spatial
          args: --verbose download sdk --sdk-version 14.1.0 --with-test-schema
        env:
          SPATIAL_LIB_DIR: "dependencies"

      - name: Generate project-example code
        run: pushd project-example && cargo spatial --verbose codegen && popd
        shell: bash
        env:
          SPATIAL_LIB_DIR: "../dependencies"

      - name: Generate test-suite code
        run: pushd test-suite && cargo spatial --verbose codegen && popd
        shell: bash
        env:
          SPATIAL_LIB_DIR: "../dependencies"

      - name: Run cargo clean
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off'
          SPATIAL_LIB_DIR: "dependencies"

      - name: Generate test coverage report
        uses: actions-rs/grcov@v0.1

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} #required
          file: ./codecov.info
          yml: ./codecov.yml
